// zmienne.c - prosty program ilustrujący wykorzystanie i drukowanie zmiennych oraz
//             ewentualne problemy z precyzją przechowywania


#include <stdio.h> // USES - deklaracje funkcji wejścia/wyjścia
#include <math.h> // USES - deklaracje funkcji matematycznych

#define JednaTrzecia (1.0/3.0) // uwaga na odczyt przy podstawieniu (rola nawiasów)
#define JednaTrzeciaFloat (1.0f/3.0f) // wszelkie stałe liczby ("magic numbers") 
           // najlepiej zebrać w jedno miejsce kodu i nadac im symboliczne nazwy
           // kompilator w pierwszej fazie działania zastąpi wszystkie wystąpienia

#define TOLERANCE 1e-20

// zwrot kodu błędu lub sukcesu (0)
int main(void)
{

  // // definicje
   int n; // nazwy zmiennych - znaczące, niekoniecznie krótkie, z dużymi i małymi literami
  // nazwy krótkie, nieznaczące dla zmiennych pomocniczych stosowanych lokalnie
   char znak_do_testowania;

  // // inicjowanie
   n = 1/3; // instrukcja przypisania - stałe liczbowe i podstawowe operacje
   znak_do_testowania = 'a'; // stała znakowa

  // // definicja z inicjowaniem
   float f = 1.0/3.0; // stałe - magic numbers?
   double d = 1.0/3.0; // zapis
  // //d = f;

  // // możliwe notacje dla liczb zmiennoprzecinkowych - e itp.
   printf("liczby i znaki: znak = %c, n = %7d, f = %20.15f, d = %20.15lf\n", 
   	 znak_do_testowania, n, f, d);

  // // Operatory oraz niejawne i jawne konwersje typów
   d = 1111 + 1000 * n; // d = (double) n;
   n = f + 2.5; // n = (int) f;
   f = n / 3; // (double) n / 3; , n / 3.0 , (double) (n / 3)
   printf("\nNiejawne i jawne konwersje typów:\n");
   printf("liczby i znaki: n = %d, f = %f, d = %lf lub d = %le\n", n, f, d, d);


  // // Precyzja stałych i zmiennych
   d = JednaTrzecia * 3.0;
   double e = JednaTrzeciaFloat * 3.0;
   float g = JednaTrzeciaFloat * 3.0f;
   printf("\nPrecyzja stałych i niejawne konwersje:\n");
   printf("(1/3)*3: \td = %20.15lf; e = %20.15lf, g = %20.15lf\n",
   	 d, e, g);

  // // operatory i ich priorytety - programowanie zaawansowane a programowanie bezpieczne
   double h;
   h = f + d; // do testowania: f++d;? f+++d;? - nawiasy! (bezpieczniej - (f+d; f++;) (++d;f+d;))
   printf("\nPriorytety operatorów:\n");
   printf("\td = %20.15lf; f = %20.15lf, h = %20.15lf\n",
   	 d, f, h);

  // // operatory i ich priorytety
  // // x = a++;  x = ++a;  

  // // operatory / - dzielenie całkowite i % - modulo
  // n = 1574;
  // int m = n % 7;
  // int o = n / 7;
  // printf("\nn = %d, n/7 = %d, n%7 = %d, n = (n/7)*7 + (n%7) = %d\n",
  // 	 n, o, m, o*7+m);

  // // wartość logiczna wyrażeń
  // printf("\nWartość logiczna wyrażenia: %d<%d wynosi %d\n", n, m, n<m);
  // printf("\nWartość logiczna wyrażenia: %d<%d lub %d>%d wynosi %d\n", n, m, n, m, (n<m)||(n>m));


  // // kłopoty z precyzją:
  // double dx1 = 1.23e7;
  // double dx2 = 1.23e-7;

  // printf("\ndx1 = %20.15lf, dx2 = %20.15lf, \n",
  // 	 dx1, dx2);
  // if( (dx1+dx2)-dx1 == dx2 ){
  //   printf("\n(dx1+dx2)-dx1 == dx2 (dla double)\n");
  // }
  // else {
  //   printf("\n(dx1+dx2)-dx1 != dx2 (nawet dla double!) ( (dx1+dx2)-dx1 = %20.15lf )\n",
  // 	   (dx1+dx2)-dx1);
  // }
 
  // // kłopoty z precyzją:
  // float fx1 = 1.23e7;
  // float fx2 = 1.23e-7;

  // printf("\nfx1 = %20.15lf, fx2 = %20.15lf, \n",
  // 	 fx1, fx2);
  // if( (fx1+fx2)-fx1 == fx2 ){
  //   printf("\n(fx1+fx2)-fx1 == fx2 (dla float)\n");
  // }
  // else {
  //   printf("\n(fx1+fx2)-fx1 != fx2 (dla float) ( (fx1+fx2)-fx1 = %20.15lf )\n",
  // 	   (fx1+fx2)-fx1);
  // }
  // // obsługa błędów - temat rzeka
  // // wariant prosty:

  // // chcemy obliczyć 1 / ( (fx1+fx2)-fx1 ) - powinno być równe 1/fx2

  // // próba uniknięcia dzielenia przez zero:
  // // if( fx2 != 0.0 ){ - błędy 1. (fx1+fx2)-fx1 != fx2, 2. porównanie float

  // // poprawna próba uniknięcia dzielenia przez zero lub utraty precyzji:
  // if( fabs ((fx1+fx2)-fx1) < TOLERANCE){
    
  //   printf("\nPróba dzielenia przez liczbę bliską zero! Przerwanie programu!\n");
    
  //   //return(-1); 
  //   // lub exit(-1) - exit przerywa wykonanie całego programu, nie tylko aktualnej funkcji
    
  // }

  // float fx3 = 1.0f / ((fx1+fx2)-fx1); // powinno byc równe 1/fx2...
  // printf("\n1.0f / ((fx1+fx2)-fx1) = %20.15lf\n", fx3);
  
  // double dx3 = 1.0 / ((dx1+dx2)-dx1); // powinno byc równe 1/dx2...
  // printf("\n1.0 / ((dx1+dx2)-dx1) = %20.15lf  != 1.0/dx2 = %20.15lf\n", dx3, 1.0/dx2);
  // printf("Zostały tylko trzy cyfry znaczące na skutek skończonej precyzji...\n");
  
  printf("\nProgram dotarł do końca\n");
  return(0);
}
